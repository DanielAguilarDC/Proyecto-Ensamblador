***********************************************
*   PROYECTO 2: SERPIENTES Y ESCALERAS        *
*   AGUILAR MAYA DANIEL                       *
*   ESTRUCTURA Y PROGRAMACIÓN DE COMPUTADORAS *
***********************************************


***********************************************
*           DATOS PARA LOS 2 JUGADORES        *
***********************************************

	ORG $0000           ;dirección de inicio de variables para el jugador 1 en decimal
VAR1_1 EQU $0000              ;dirección primer decimal del jugador 1
VAR1_2 EQU $0001 		;dirección segundo decimal del jugador 1
	ORG $0002           ;dirección donde se guardará la frase :Jugador 1___
jugador1 FCB ':','J','u','g','a','d','o','r',' ','1','_','_','_',0   ; Carácter nulo que indica el final de la cadena
POSICIONJ1 EQU $000F          ;posicion real del jugador 1 (hexadecimal)



	ORG $0010		;dirección de inicio de variables para el jugador 2 en decimal
VAR2_1 EQU $0010		;dirección primer decimal del jugador 2
VAR2_2 EQU $0011		;dirección segundo decimal del jugador 2
	ORG $0012		;dirección donde se guardará la frase :Jugador 2___
jugador2 FCB ':','J','u','g','a','d','o','r',' ','2','_','_','_',0   ; Carácter nulo que indica el final de la cadena
POSICIONJ2 EQU $001F  	;posicion real del jugador 1 (hexadecimal)


***********************************************
*            DATOS DE LOS DOS DADOS           *
***********************************************

	ORG $0020           ;DADO 1
D1   EQU $0020 		;Direccion para guardar dado 1 en decimal en ASCII
	ORG $0021
palabraDado1 FCB ':','D','A','D','O',' ','1','_','_','_','_','_','_','_',0
DADO1	EQU $002F	;Direccion para guardar el dado 1 (hexadecimal)

	ORG $0030           ;DADO 2
D2	EQU $0030 		;Direccion para guardar dado 2 en decimal
	ORG $0031
palabraDado2 FCB ':','D','A','D','O',' ','2','_','_','_','_','_','_','_',0
DADO2 EQU $003F	;Direccion para guardar el dado 2 (hexadecimal)

	ORG $0040           ;TIRADA
T1   EQU $0040 		;Direccion para guardar 1er dato decimal de la tirada
T2   EQU $0041                ;Direccion para guardar 2do dato decimal de la tirada
	ORG $0042
palabraTirada FCB ':','T','I','R','A','D','A','_','_','_','_','_','_',0
TIRADA EQU $004F              ;Tirada real de los dados (hexadecimal)


***********************************************
*            CONSTANTES PUERTO SERIAL         *
***********************************************
*DECLARACION CONSTANTES

SCDR   EQU   $102F
SCCR2  EQU   $102D
SCSR   EQU   $102E
SCCR1  EQU   $102C
BAUD   EQU   $102B
HPRIO  EQU   $103C
SPCR   EQU   $1028
CSCTL  EQU   $105D
OPT2   EQU   $1038
DDRD   EQU   $1009

*DECLARACION DE VARIABLES
*PARA DADOS
ORDEN EQU $0070
U1    EQU $0071
U2    EQU $0072
U3    EQU $0073
U4    EQU $0074
U5	EQU $0075

ALEATORIO EQU $0078
AUX1 EQU $0080
AUX2 EQU $0081

***********************************************
*   VARIABLES BCD: Conversión a decimal       *
***********************************************
V1	EQU $0082
V2	EQU $0083
V3	EQU $0084
V4	EQU $0085
V5	EQU $0086
W1	EQU $0087
W2	EQU $0088
W3	EQU $0089
W4	EQU $008A
W5	EQU $008B

******************************************************
*      VARIABLE DONDE SE GUARDARÁN LAS DIRECCIONES   *
*        DE MEMORIA DE LA POSICIÓN DEL JUGADOR 1 Y 2 *
*                   (AUXILIARES)                     *                 
******************************************************
AUXJ EQU $0090
AUXJD1 EQU $0092
AUXJD2 EQU $0094
TEMP EQU $0096

***********************************************
*                  MENSAJE                    *
*        EMPEZARÁ EN LA LOCALIDAD 0050        *
***********************************************



*********************************************************************************
***************                                             *********************
***************            INICIO DEL PROGRAMA              *********************
***************                                             *********************
*********************************************************************************


	ORG $8000
INICIO:
	;Puerto serial
	LDS #$00FF
	JSR SERIAL
	;Limpieza de datos para empezar el programa
	JSR LIMPIAR_DATOS


JUEGO:
	;Cargamos la dirección de memoria del jugador 1: $000F 
	LDX #POSICIONJ1
	STX AUXJ

	LDX #VAR1_1
	STX AUXJD1
	LDX #VAR1_2	
	STX AUXJD2

	JSR TURNO ;Acciones del turno del jugador 1:
	          ;Tirar dados 
	          ;/ Moverse 
	          ;/ Verificar si excede en 100
	          ;/Verificar serpiente\escalera 
	          ;/ verificar si ganó


	LDX #POSICIONJ2
	STX AUXJ

	LDX #VAR2_1
	STX AUXJD1
	LDX #VAR2_2	
	STX AUXJD2
	
	JSR TURNO

	BRA JUEGO ;Si al acabar el turno del jugador 1 y 2 no ha ganado nadie
	          ;Se reinicia el proceso de juego

***********************************************
*                                             *
*    PROCEDIMIENTO PARA EL TURNO DE JUEGO     *
*    INVOLUCRA  LA LLAMADA A LANZAR_DADO,     *
*    MODER_JUGADOR,                           *
*     -------------                           *
*                                             *
*********************************************** 

TURNO:
	;Se lanzan los dados
	JSR LANZAR_DADO

	;Al mover al jugador, ya sea que exceda o no exceda 100, el valor ya está en el registro A
	JSR MOVER_JUGADOR

	;Se manda a llamar al procedimiento que se encargará de comparar la posición con alguna escalera o serpiente
	;para hacer el respectivo cambio de posición
	JSR VERIFICAR_SALTO

	STAA 0,X 

	;Guarda la posición final en la variable temporal para la última parte de verificar si hay ganador
	;STAA TEMP

	;Pone en ascii lo que hay en A. Con lo siguiente se tiene en el registro D el valor de la posición (16 bits)
	;Para poder usar el procedimiento
	TAB 
	LDAA #$00

	JSR BINBCD
	
	;X ya tiene la dirección de las decenas: 0000 (jugador 1) o bien 0010 (jugador 2)
	LDX AUXJD1
	LDAA V4 ;carga el valor de las decenas 
	STAA 0,X 

	;X ya tiene la dirección 0001 (jugador 1) o bien 0011 (jugador 2)
	LDX AUXJD2
	LDAA V5 ;carga el valor de las unidades
	STAA 0,X

	JSR MOSTRAR_MENSAJE

	RTS

***********************************************
*    PROCEDIMIENTO QUE SOLAMENTE SUMA A LA    * 
*    POSICIÓN DEL JUGADOR LO QUE SE OBTUVO    *
*     EN LA TIRADA Y VERIFICA SI SE EXCEDE    *
*     MÁS DE 100 PARA HACER EL RETROCESO      *
***********************************************
MOVER_JUGADOR:
	;Dirección de memoria del jugador en cuestión en el reg X
	LDX AUXJ
	
	;Contenido (posición) del jugador en cuestión en el registro A
	LDAA 0,X

	;A lo que tenga se suma la tirada
	ADDA TIRADA

	;Si excede en 100 entonces se resta a 100 el excedente y se guarda en A
	;En caso de no exceder, A se mantiene 
	JSR VERIFICAR_MAS100

	RTS
************************************************
*  PROCEDIMIENTO PARA VERIFICAR SI LA POSICIÓN *
*  ES MAYOR A 100. EN CASO DE SER VERDADERO    *
*   RESTAR LOS VALORES DE EXCEDENTE            *
************************************************
VERIFICAR_MAS100:
	CMPA #100

	BLE FIN_V100    ;Si el valor de A es menor o igual a 100 no hacer nada (salto a FIN_V100)

	LDAB #100
	SBA ;En A ahora se tiene el excedente (Si es 105 entonces en A ya se tiene 5)

	TAB ;Ahora en B está el excedente
	LDAA #100

	SBA ;Se resta lo que tiene A (100) de B (el excedente, 5 en este caso) para así tener 95 en A

		
FIN_V100:
	RTS

************************************************
*    PROCEDIMIENTO PARA VERIFICAR ESCALERAS    *
*                 Y SERPIENTES                 *
************************************************
VERIFICAR_SALTO:

ESCALERA_1:
	CMPA #4
	BNE ESCALERA_2 ;Si la posición no coincide con 4, salta a otra escalera
	ADDA  #21
	BRA FIN_SALTO

ESCALERA_2:
	CMPA #13
	BNE ESCALERA_3
	ADDA #33
	BRA FIN_SALTO

ESCALERA_3:
	CMPA #33
	BNE ESCALERA_4
	ADDA #16
	BRA FIN_SALTO

ESCALERA_4:
	CMPA #42
	BNE ESCALERA_5
	ADDA #21
	BRA FIN_SALTO

ESCALERA_5:
	CMPA #50
	BNE ESCALERA_6
	ADDA #29
	BRA FIN_SALTO

ESCALERA_6:
	CMPA #62
	BNE ESCALERA_7
	ADDA #19
	BRA FIN_SALTO

ESCALERA_7:
	CMPA #74
	BNE SERPIENTE_1
	ADDA #18
	BRA FIN_SALTO

SERPIENTE_1:
	CMPA #27
	BNE SERPIENTE_2
	LDAB #22
	SBA
	BRA FIN_SALTO

SERPIENTE_2:
	CMPA #40
	BNE SERPIENTE_3
	LDAB #37
	SBA 
	BRA FIN_SALTO

SERPIENTE_3:
	CMPA #43
	BNE SERPIENTE_4
	LDAB #25
	SBA 
	BRA FIN_SALTO

SERPIENTE_4:
	CMPA #54
	BNE SERPIENTE_5
	LDAB #23
	SBA 
	BRA FIN_SALTO

SERPIENTE_5:
	CMPA #66
	BNE SERPIENTE_6
	LDAB #21
	SBA 
	BRA FIN_SALTO

SERPIENTE_6:
	CMPA #76
	BNE SERPIENTE_7
	LDAB #18
	SBA 
	BRA FIN_SALTO

SERPIENTE_7:
	CMPA #89
	BNE SERPIENTE_8
	LDAB #36
	SBA 
	BRA FIN_SALTO

SERPIENTE_8:
	CMPA #99
	BNE FIN_SALTO
	LDAB #58
	SBA 

FIN_SALTO:

	RTS 


************************************************
*     PROCEDIMIENTO DE LANZAR_DADO, INVOLUCRA  *
*	TENER VALORES PARA LOS DOS DADOS Y LA    *
*	SUMA DE ELLOS EN 'TIRADA'. Para generar  *
*	los valores se manda a llamar a          * 
*	GENERAR_ALEATORIO (AUX1,AUX2)            *
************************************************

LANZAR_DADO:
	;El número aleatorio está en el registro Y
	JSR GENERAR_ALEATORIO
	
	;Cambiamos el registro Y al registro D (conformado por A y B)	
	XGDY
	;Un byte (para el primer dado) se guarda en AUX1
	STAA AUX1
		
	;Un byte (para el segundo dado) se guarda en AUX2
	STAB AUX2

	;___________________________________DADO_1
	;Primer byte del número aleatorio a su conversión en un dado
	;Se pasa ese byte en todo el registro D y se divide por el registro
	;X con el valor de $0006. Se hace lo propio con el segundo byte
	LDAA #$00
	LDAB AUX1
	
	LDX #$0006
	
	IDIV 
	;El residuo se guarda en el registro D, pero como se guardará un residuo
	;entre 0 y 5, dicho resultado estará en  el registro B
	INCB ;Valor entre 1 y 6
	
	STAB DADO1
	;___________________________________DADO_2
	LDAA #$00
	LDAB AUX2	

	LDX #$0006

	IDIV

	INCB
	
	STAB DADO2	 
	;___________________________________TIRADA
	LDAA DADO1
	LDAB DADO2
	
	;Suma los dados 1 y 2
	ABA
	STAA TIRADA	
	;__________________MOSTRAR DADOS EN ASCII
	LDAA DADO1
	ADDA #48
	STAA D1

	LDAA DADO2
	ADDA #48
	STAA D2
	
	;__________________MOSTRAR TIRADA EN ASCII
	LDAA #$00
	LDAB TIRADA
	
	JSR BINBCD

	LDAA V4
	STAA T1
	
	LDAA V5	
	STAA T2

	RTS

*************************************************
*  PROCEDIMIENTO PARA GENERAR UN NÚMERO         *
*  ALEATORIO EN LA LOCALIDAD LDY Y ASIGNARLA    *
*  EN LA VARIABLE ALEATORIO (LUEGO EN AUX1,AUX2)*
*************************************************

GENERAR_ALEATORIO:
AGAIN
	LDY #$0000

CICLATED
      LDAA #'?
      STAA ORDEN
CICLOD
	INY
      LDAA ORDEN
      CMPA #'?
      BEQ  CICLOD

      LDAB U1
      BNE  SIGUEAD
BORRAD
      CLR U1
      CLR U2
      CLR U3
      CLR U4

      CMPA #'D
      BNE CICLATED
      STAA U1     * VALIDA D
      JMP CICLATED

SIGUEAD
      LDAB U2
      BNE  SIGUED
      CMPA #'A
      BNE BORRAD
      STAA U2     * VALIDA A
      JMP CICLATED

SIGUED
      LDAB U3
      BNE  SIGUEO
      CMPA #'D
      BNE BORRAD
      STAA U3     * VALIDA D
      JMP CICLATED
      
SIGUEO
      LDAB U4
      BNE  SIGUEFS
      CMPA #'O
      BNE BORRAD
      STAA U4     * VALIDA 0
      JMP CICLATED
SIGUEFS
	CMPA #'S
      BNE BORRAD
TIRADAA
	*se toma el numero aleatorio
	STY ALEATORIO

	RTS

***********************************************
*							   *
*	PROCEDIMIENTO PARA CONVERTIR UN NÚMERO  *
*	     EN HEXADECIMAL A DECIMAL EN        *  
*         LA VENTANA DUMP (ASCII ADECUADO)	   *
***********************************************

BINBCD
      CLR V1
      CLR V2
      CLR V3
      CLR V4
      CLR V5
      
      CLR W1
      CLR W2
      CLR W3
      CLR W4
      CLR W5

      LDX  #$2710
      IDIV 
      XGDX
      STAB W1
      ADDB #$30
      STAB V1
      XGDX
      LDX  #$3E8
      IDIV
      XGDX
      STAB W2
      ADDB #$30
      STAB V2
      XGDX
      LDX  #$64
      IDIV
      XGDX
      STAB W3
      ADDB #$30
      STAB V3
      XGDX
      LDX  #$A
      IDIV
      XGDX
      STAB W4
      ADDB #$30
      STAB V4
      XGDX
      STAB W5
      ADDB #$30
      STAB V5


      RTS
  

***********************************************
*                                             *
*         PROCEDIMIENTO PARA LIMPIAR DATOS    *
*         EMPEZANDO EL JUEGO                  *
*                                             *
*********************************************** 

LIMPIAR_DATOS:
	;INICIALIZACIÓN EN CERO DECIMAL LAS VARIABLES
	LDAA #48	;0 en ASCII
	STAA VAR1_1 
    STAA VAR1_2
    STAA VAR2_1
    STAA VAR2_2
    STAA T1
    STAA T2
    STAA D1
    STAA D2

    ;INICIALIZANDO EN CERO REAL LAS VARIABLES	
    LDAA #00
    STAA POSICIONJ1
    STAA POSICIONJ2
    STAA DADO1
    STAA DADO2
    STAA TIRADA
    STAA $52
    STAA $53
    STAA $54
    STAA $55
    STAA $56
    STAA $57
    STAA $58
    STAA $59
    STAA $5A
    STAA $5B
    STAA $5C
    STAA $5D
    STAA $5E
    STAA $5F

    LDAA #88
    STAA $50
    STAA $51

    RTS

***********************************************
*                                             *
*         PROCEDIMIENTO PARA MOSTRAR          *
*            MENSAJE DEL GANADOR              *
*						          *
*                                             *
***********************************************

;Este procedimiento verifica si hay ganador
MOSTRAR_MENSAJE:
 
;Si el ganador es el jugador 1
MSJ_JUGADOR1:
	;Compara el valor 100 con el contenido del JUGADOR1
	LDAA #100	
	CMPA POSICIONJ1
	
	BNE MSJ_JUGADOR2 
	
	LDAA #'J'
	STAA $50
	LDAA #'1'
	STAA $51
	
	;Si hay un ganador entonces las variables auxiliares de BINBCD DEBEN TENER EL 100
	LDAA V3
	STAA VAR1_1
	LDAA V2 
	STAA VAR1_2
	LDX #$0002
	LDAA V1 
	STAA 0,X

	BRA MSJ	

;Si el ganador es el jugador 2
MSJ_JUGADOR2:
	;Compara el valor 100 con el contenido del JUGADOR2
	LDAA #100
	CMPA POSICIONJ2
	
	BNE FIN_MSJ
	LDAA #'J'
	STAA $50
	LDAA #'2'
	STAA $51

	;Si hay un ganador entonces las variables auxiliares de BINBCD DEBEN TENER EL 100
	LDAA V3
	STAA VAR2_1
	LDAA V2 
	STAA VAR2_2
	LDX #$0012
	LDAA V1 
	STAA 0,X

MSJ: 

	LDAA #' '        
	STAA $52       
	LDAA #'Y'        
	STAA $53       
	LDAA #'A'        
	STAA $54       
	LDAA #' '      
	STAA $55      
	LDAA #'G'      
	STAA $56      
	LDAA #'A'       
	STAA $57      
	LDAA #'N'        
	STAA $58       
	LDAA #'A'
	STAA $59
	LDAA #'S'
	STAA $005A
	LDAA #'T'
	STAA $005B
	LDAA #'E'
	STAA $005C
	LDAA #'!'
	STAA $005D
	LDAA #'!'
	STAA $005E
	LDAA #'!'
	STAA $005F

	BRA EXITO
FIN_MSJ
	RTS

*****************************************************************************************
*****************************************************************************************
*       PUERTO SERIAL              ******************************************************
*****************************************************************************************
SERIAL

       LDD   #$302C  * CONFIGURA PUERTO SERIAL
       STAA  BAUD    * BAUD  9600  para cristal de 8MHz
       STAB  SCCR2   * HABILITA  RX Y TX PERO INTERRUPCN SOLO RX
       LDAA  #$00
       STAA  SCCR1   * 8 BITS

       LDAA  #$FE    * CONFIG PUERTO D COMO SALIDAS (EXCEPTO PD0)
       STAA  DDRD    * SEA  ENABLE DEL DISPLAY  PD4  Y RS PD3
                     
      
       LDAA  #$04
       STAA  HPRIO

       LDAA  #$00
       TAP
      RTS
EXITO:
	BRA EXITO3
      
***********************************
* ATENCION A INTERRUPCION SERIAL
***********************************
       ORG  $F100

       LDAA SCSR
       LDAA SCDR
       STAA ORDEN
         
       RTI


***********************************
* VECTOR INTERRUPCION SERIAL
***********************************
       ORG   $FFD6
       FCB   $F1,$00       


***********************************
*RESET
***********************************
       ORG    $FFFE
RESET  FCB    $80,$00
***********************************
	ORG $82b0
EXITO3:
       END   $8000
